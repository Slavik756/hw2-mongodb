{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Contacts app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of contact book app"
  },
  "servers": [
    {
      "url": "http://localhost:3000"
    },
    {
      "url": "https://hw2-mongodb-final.onrender.com"
    }
  ],
  "tags": [
    {
      "name": "Contacts",
      "description": "Operations about users."
    },
    {
      "name": "Auth",
      "description": "Auth operations."
    }
  ],
  "paths": {
    "/contacts": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get list of contacts",
        "operationId": "getContacts",
        "description": "Get list of contacts with this endpoint",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/perPage"
          },
          {
            "$ref": "#/components/parameters/sortBy"
          },
          {
            "$ref": "#/components/parameters/sortOrder"
          },
          {
            "$ref": "#/components/parameters/isFavourite"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getContacts.contacts.response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized.contacts.response"
          }
        }
      },
      "post": {
        "tags": [
          "Contacts"
        ],
        "summary": "Create contact",
        "operationId": "createContact",
        "description": "Create a contact with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Payload required to create a contact, including name, phoneNumber, contactType, and optional photo",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/postContact.requestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/postContact.contacts.response"
          },
          "400": {
            "$ref": "#/components/responses/bodyValidationError.contacts.response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized.contacts.response"
          }
        }
      }
    },
    "/contacts/{id}": {
      "get": {
        "tags": [
          "Contacts"
        ],
        "summary": "Get contact by id",
        "operationId": "getContactById",
        "description": "Get contact by id",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getContactById.contacts.response"
          },
          "400": {
            "$ref": "#/components/responses/invalidContactId.contacts.response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized.contacts.response"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError.contacts.response"
          }
        }
      },
      "put": {
        "tags": [
          "Contacts"
        ],
        "summary": "Put contact",
        "operationId": "putContact",
        "description": "Create or update a contact with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/putContact.requestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/updateContact.contacts.response"
          },
          "201": {
            "$ref": "#/components/responses/createContact.contacts.response"
          },
          "400": {
            "$ref": "#/components/responses/bodyValidationErrorOrInvalidContactId.contacts.response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized.contacts.response"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError.contacts.response"
          }
        }
      },
      "patch": {
        "tags": [
          "Contacts"
        ],
        "summary": "Patch contact",
        "operationId": "patchContact",
        "description": "Update a contact with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/patchContact.requestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/patchContact.contacts.response"
          },
          "400": {
            "$ref": "#/components/responses/bodyValidationErrorOrInvalidContactId.contacts.response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized.contacts.response"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError.contacts.response"
          }
        }
      },
      "delete": {
        "tags": [
          "Contacts"
        ],
        "summary": "Patch contact",
        "operationId": "deleteContactById",
        "description": "Update a contact with payload",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "Deletes a contact"
          },
          "400": {
            "$ref": "#/components/responses/invalidContactId.contacts.response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized.contacts.response"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError.contacts.response"
          }
        }
      }
    },
    "/auth/regiser": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Register user",
        "operationId": "createUser",
        "description": "Create a new user",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/register.requestBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/register.auth.response"
          },
          "409": {
            "$ref": "#/components/responses/emailInUse.auth.response"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Login user",
        "operationId": "loginUser",
        "description": "Login a user",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/login.requestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/login.auth.response"
          },
          "400": {
            "$ref": "#/components/responses/bodyValidationError.auth.response"
          },
          "401": {
            "$ref": "#/components/responses/unauthorized.auth.response"
          },
          "404": {
            "$ref": "#/components/responses/notFoundError.auth.response"
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logout a user",
        "security": [],
        "responses": {
          "204": {
            "description": "Logs out user"
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Refresh user",
        "operationId": "refreshUser",
        "description": "Refresh a user",
        "security": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/refresh.auth.response"
          },
          "401": {
            "$ref": "#/components/responses/refreshUnauthorized.auth.response"
          }
        }
      }
    },
    "/auth/send-reset-email": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Send reset email",
        "operationId": "sendResetEmail",
        "description": "Send email to reset password",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/sendResetEmail.requestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/sendResetEmail.auth.response"
          },
          "404": {
            "$ref": "#/components/responses/userNotFound.auth.response"
          }
        }
      }
    },
    "/auth/reset-pwd": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Reset password",
        "operationId": "resetPwd",
        "description": "Reset your password with JWT token",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/resetPwd.requestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/resetPwd.auth.response"
          },
          "401": {
            "$ref": "#/components/responses/resetTokenExpiredOrInvalid.auth.response"
          }
        }
      }
    },
    "/auth/get-oauth-url": {
      "get": {
        "tags": [
          "Auth"
        ],
        "summary": "Get oauth url",
        "operationId": "getOAuthUrl",
        "description": "Get google oauth url",
        "security": [],
        "responses": {
          "200": {
            "$ref": "#/components/responses/getOAuthUrl.auth.response"
          }
        }
      }
    },
    "/auth/confirm-oauth": {
      "post": {
        "tags": [
          "Auth"
        ],
        "summary": "Confirm oauth",
        "operationId": "confirmOAuth",
        "description": "Login via Google OAuth",
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/confirmOAuth.requestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/confirmOAuth.auth.response"
          },
          "500": {
            "$ref": "#/components/responses/invalidGrant.auth.response"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "parameters": {
      "page": {
        "in": "query",
        "name": "page",
        "schema": {
          "type": "integer"
        },
        "example": 1,
        "required": false
      },
      "perPage": {
        "in": "query",
        "name": "perPage",
        "schema": {
          "type": "integer",
          "example": 10
        },
        "required": false
      },
      "sortBy": {
        "in": "query",
        "name": "sortBy",
        "schema": {
          "type": "string",
          "enum": [
            "_id",
            "name",
            "isFavourite",
            "createdAt",
            "updatedAt"
          ],
          "example": "name",
          "description": "All student's fields can be mentioned. Default value - name"
        },
        "required": false
      },
      "sortOrder": {
        "in": "query",
        "name": "sortOrder",
        "schema": {
          "type": "string",
          "enum": [
            "asc",
            "desc"
          ],
          "example": "asc"
        },
        "required": false
      },
      "isFavourite": {
        "in": "query",
        "name": "isFavourite",
        "schema": {
          "type": "boolean",
          "enum": [
            true,
            false
          ],
          "example": true
        },
        "required": false
      },
      "id": {
        "in": "path",
        "name": "id",
        "required": true,
        "schema": {
          "type": "string",
          "example": "65ca67e7ae7f10c88b598384"
        }
      }
    },
    "schemas": {
      "contact.schema": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "phoneNumber",
          "email",
          "isFavourite",
          "contactType",
          "userId",
          "photo",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "_id": {
            "description": "Contact's id",
            "type": "string"
          },
          "name": {
            "description": "Contact's name. Should be min 3 and max 20 characters long",
            "type": "string"
          },
          "phoneNumber": {
            "description": "Contact's phone number. Should be min 3 and max 20 digits long and may start with '+'",
            "type": "string"
          },
          "email": {
            "description": "Contact's email",
            "type": "string"
          },
          "isFavourite": {
            "description": "Whether the contact is favourite. Defaults to false",
            "type": "boolean",
            "default": false
          },
          "contactType": {
            "description": "Contact's contact type",
            "type": "string",
            "enum": [
              "work",
              "home",
              "personal"
            ],
            "default": "personal"
          },
          "userId": {
            "description": "Contact's user id. Should be a valid Mongo ObjectId",
            "type": "string"
          },
          "photo": {
            "description": "Link to contact's photo",
            "type": "string"
          },
          "createdAt": {
            "description": "Photo created at",
            "type": "string"
          },
          "updatedAt": {
            "description": "Photo updated at",
            "type": "string"
          }
        }
      },
      "getContacts.success": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "required": [
              "data",
              "page",
              "perPage",
              "totalItems",
              "totalPages",
              "hasNextPage",
              "hasPreviousPage"
            ],
            "properties": {
              "data": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/contact.schema"
                }
              },
              "page": {
                "type": "number"
              },
              "perPage": {
                "type": "number"
              },
              "totalItems": {
                "type": "number"
              },
              "totalPages": {
                "type": "number"
              },
              "hasNextPage": {
                "type": "boolean"
              },
              "hasPreviousPage": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "unauthorized.error": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "message": {
                "type": "string"
              }
            }
          }
        }
      },
      "postContact.requestBody": {
        "type": "object",
        "required": [
          "name",
          "phoneNumber",
          "contactType"
        ],
        "properties": {
          "name": {
            "description": "Contact's name. Should be min 3 and max 20 characters long",
            "type": "string"
          },
          "phoneNumber": {
            "description": "Contact's phone number. Should be min 3 and max 20 digits long and may start with '+'",
            "type": "string"
          },
          "email": {
            "description": "Contact's email",
            "type": "string"
          },
          "isFavourite": {
            "description": "Whether is contact favourite",
            "type": "boolean"
          },
          "contactType": {
            "description": "Contact's contact type",
            "type": "string",
            "enum": [
              "work",
              "home",
              "personal"
            ]
          },
          "photo": {
            "description": "Contact's photo",
            "type": "string",
            "format": "binary"
          }
        },
        "example": {
          "name": "Tokio_Touka",
          "phoneNumber": "+380951000993",
          "email": "touka@gmail.com",
          "isFavourite": false,
          "contactType": "home"
        }
      },
      "postContact.success": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/contact.schema"
          }
        }
      },
      "badRequest.error": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "message": {
                "type": "string"
              },
              "errors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "path": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "type": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "getContactById.success": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/contact.schema"
          }
        }
      },
      "putContact.requestBody": {
        "type": "object",
        "required": [
          "name",
          "phoneNumber",
          "contactType"
        ],
        "properties": {
          "name": {
            "description": "Contact's name. Should be min 3 and max 20 characters long",
            "type": "string"
          },
          "phoneNumber": {
            "description": "Contact's phone number. Should be min 3 and max 20 digits long and may start with '+'",
            "type": "string"
          },
          "email": {
            "description": "Contact's email",
            "type": "string"
          },
          "isFavourite": {
            "description": "Whether is contact favourite",
            "type": "boolean",
            "example": false
          },
          "contactType": {
            "description": "Contact's contact type",
            "type": "string",
            "enum": [
              "work",
              "home",
              "personal"
            ]
          },
          "photo": {
            "description": "Contact's photo",
            "type": "string",
            "format": "binary"
          }
        },
        "example": {
          "name": "Tokio_Touka",
          "phoneNumber": "+380951000993",
          "email": "touka@gmail.com",
          "isFavourite": false,
          "contactType": "home"
        }
      },
      "updateContact.success": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data",
          "isNew"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "isNew": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/contact.schema"
          }
        }
      },
      "createContact.success": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data",
          "isNew"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "isNew": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/contact.schema"
          }
        }
      },
      "patchContact.requestBody": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Contact's name. Should be min 3 and max 20 characters long",
            "type": "string"
          },
          "phoneNumber": {
            "description": "Contact's phone number. Should be min 3 and max 20 digits long and may start with '+'",
            "type": "string"
          },
          "email": {
            "description": "Contact's email",
            "type": "string"
          },
          "isFavourite": {
            "description": "Whether is contact favourite",
            "type": "boolean",
            "example": false
          },
          "contactType": {
            "description": "Contact's contact type",
            "type": "string",
            "enum": [
              "work",
              "home",
              "personal"
            ]
          },
          "photo": {
            "description": "Contact's photo",
            "type": "string",
            "format": "binary"
          }
        },
        "example": {
          "name": "Tokio_Touka",
          "phoneNumber": "+380951000993",
          "email": "touka@gmail.com",
          "isFavourite": false,
          "contactType": "home"
        }
      },
      "patchContact.success": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data",
          "isNew"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "isNew": {
            "type": "boolean"
          },
          "data": {
            "type": "object",
            "$ref": "#/components/schemas/contact.schema"
          }
        }
      },
      "register.requestBody": {
        "type": "object",
        "required": [
          "name",
          "email",
          "password"
        ],
        "properties": {
          "name": {
            "description": "User's name. Should be min 3 and max 20 characters long",
            "type": "string"
          },
          "email": {
            "description": "User's email. Should be a valid email",
            "type": "string"
          },
          "password": {
            "description": "User's password.",
            "type": "string"
          }
        },
        "example": {
          "name": "Nick Fury",
          "email": "nickfury@mail.com",
          "password": "qwerty-1234"
        }
      },
      "user.schema": {
        "type": "object",
        "required": [
          "name",
          "email",
          "_id",
          "createdAt",
          "updatedAt"
        ],
        "properties": {
          "name": {
            "description": "User's name. Should be min 3 and max 20 characters long",
            "type": "string"
          },
          "email": {
            "description": "User's email. Should be a valid email",
            "type": "string"
          },
          "_id": {
            "description": "User's _id",
            "type": "string"
          },
          "createdAt": {
            "description": "User created at",
            "type": "string"
          },
          "updatedAt": {
            "description": "User updated at",
            "type": "string"
          }
        }
      },
      "register.success": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "$ref": "#/components/schemas/user.schema"
          }
        }
      },
      "conflict.error": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "message": {
                "type": "string"
              }
            }
          }
        }
      },
      "login.requestBody": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "description": "User's email. Should be a valid email",
            "type": "string"
          },
          "password": {
            "description": "User's password.",
            "type": "string"
          }
        },
        "example": {
          "email": "nickfury@mail.com",
          "password": "qwerty-1234"
        }
      },
      "login.success": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "required": [
              "url"
            ],
            "properties": {
              "url": {
                "type": "string"
              }
            }
          }
        }
      },
      "badRequestError.error": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "message": {
                "type": "string"
              },
              "errors": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    },
                    "path": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "type": {
                      "type": "string"
                    },
                    "context": {
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "notFoundError.error": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "message": {
                "type": "string"
              }
            }
          }
        }
      },
      "refresh.success": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "required": [
              "accessToken"
            ],
            "properties": {
              "accessToken": {
                "type": "string"
              }
            }
          }
        }
      },
      "refreshUnauthorized.error": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "message": {
                "type": "string"
              }
            }
          }
        }
      },
      "sendResetEmail.requestBody": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "description": "User's email. Should be a valid email",
            "type": "string"
          }
        },
        "example": {
          "email": "nickfury@mail.com"
        }
      },
      "sendResetEmail.success": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "userNotFound.error": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "message": {
                "type": "string"
              }
            }
          }
        }
      },
      "resetPwd.requestBody": {
        "type": "object",
        "required": [
          "password",
          "token"
        ],
        "properties": {
          "password": {
            "description": "New user password",
            "type": "string"
          },
          "token": {
            "description": "Json web token",
            "type": "string"
          }
        },
        "example": {
          "password": "123",
          "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2ODRmNmU4NWE4MWY4N2I5ZmE2YzY1ZTkiLCJlbWFpbCI6ImVuZGVycXdlcjEyQGdtYWlsLmNvbSIsImlhdCI6MTc1MDE4MjI2NiwiZXhwIjoxNzUwMTgyNTY2fQ.2iSoIUmS0PcAITfcPgz7fhgHG4qBhctwf0gilaw2aM1"
        }
      },
      "resetPwd.success": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object"
          }
        }
      },
      "resetTokenExpiredOrInvalid.error": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "required": [
              "message"
            ],
            "properties": {
              "message": {
                "type": "string"
              }
            }
          }
        }
      },
      "getOAuthUrl.success": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "required": [
              "url"
            ],
            "properties": {
              "url": {
                "type": "string"
              }
            }
          }
        }
      },
      "confirmOAuth.requestBody": {
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "description": "Google oauth code",
            "type": "string"
          }
        },
        "example": {
          "code": "4/0AUJR-x4jQ5V02B4SQiRn9jYwg8jBCTUv44efvTJbk0V8zxxBqprqv5q4APi45-z-ME6q8Q"
        }
      },
      "confirmOAuth.success": {
        "type": "object",
        "required": [
          "status",
          "message",
          "data"
        ],
        "properties": {
          "status": {
            "type": "integer"
          },
          "message": {
            "type": "string"
          },
          "data": {
            "type": "object",
            "required": [
              "accessToken"
            ],
            "properties": {
              "accessToken": {
                "type": "string"
              }
            }
          }
        }
      },
      "invalidGrant.error": {
        "type": "object",
        "required": [
          "message",
          "error"
        ],
        "properties": {
          "message": {
            "type": "string"
          },
          "error": {
            "type": "string"
          }
        }
      }
    },
    "examples": {
      "getContacts.contacts.example": {
        "value": {
          "status": 200,
          "message": "Successfully found contacts!",
          "data": {
            "data": [
              {
                "_id": "685479239262ba2385e6666a",
                "name": "Tokio_Touka",
                "phoneNumber": "+380951000993",
                "email": "touka@gmail.com",
                "isFavourite": true,
                "contactType": "work",
                "userId": "684f6e85a81f97b9fa6c65e9",
                "photo": "https://res.cloudinary.com/dz38jybtu/image/upload/v1750366499/projects/node-js-mongodb/contacts/avatars/blonde-blue-eye_1920x1080_1750366497421-881516606.jpg",
                "createdAt": "2025-06-19T20:54:59.177Z",
                "updatedAt": "2025-06-19T20:54:59.177Z"
              },
              {
                "_id": "684f6ec9a81f97b9fa6c65f1",
                "name": "Blond Cutie",
                "phoneNumber": "+380987654321",
                "email": "blond_cutie@example.com",
                "isFavourite": false,
                "contactType": "personal",
                "userId": "684f6e85a81f97b9fa6c65e9",
                "photo": "https://res.cloudinary.com/dz38jybtu/image/upload/v1750366499/projects/node-js-mongodb/contacts/avatars/blond-cutie_1750273249125-122307523.png",
                "createdAt": "2025-06-19T20:54:59.177Z",
                "updatedAt": "2025-06-19T20:54:59.177Z"
              },
              {
                "_id": "684f6ec9a81f97b9fa6c65f8",
                "name": "Bunny",
                "phoneNumber": "++380951002273",
                "email": "billie@gmail.com",
                "isFavourite": true,
                "contactType": "home",
                "userId": "684f6e85a81f97b9fa6c65e9",
                "photo": "https://res.cloudinary.com/dz38jybtu/image/upload/v1750366499/projects/node-js-mongodb/contacts/avatars/girl-cute-eyes_1750273233741-282888370.jpg",
                "createdAt": "2025-06-19T20:54:59.177Z",
                "updatedAt": "2025-06-19T20:54:59.177Z"
              }
            ],
            "page": 2,
            "perPage": 3,
            "totalItems": 14,
            "totalPages": 5,
            "hasNextPage": true,
            "hasPreviousPage": true
          }
        }
      },
      "accessTokenExpired.contacts.example": {
        "value": {
          "status": 401,
          "message": "UnauthorizedError",
          "data": {
            "message": "Access token expired"
          }
        }
      },
      "sessionNotFound.contacts.example": {
        "value": {
          "status": 401,
          "message": "UnauthorizedError",
          "data": {
            "message": "Session not found"
          }
        }
      },
      "postContact.contacts.example": {
        "value": {
          "status": 201,
          "message": "Successfully created a contact!",
          "data": {
            "name": "Tokio_Touka",
            "phoneNumber": "+380951000993",
            "email": "touka@gmail.com",
            "isFavourite": true,
            "contactType": "personal",
            "userId": "684f6e85a81f97b9fa6c65e9",
            "photo": "https://res.cloudinary.com/dz38jybtu/image/upload/v1750369802/projects/node-js-mongodb/contacts/avatars/blonde-blue-eye_1920x1080_1750369801009-465321042.jpg",
            "_id": "6854860a9262ba2385e66694",
            "createdAt": "2025-06-19T21:50:02.672Z",
            "updatedAt": "2025-06-19T21:50:02.672Z"
          }
        }
      },
      "bodyValidationError.contacts.example": {
        "value": {
          "status": 400,
          "message": "BadRequestError",
          "data": {
            "message": "Body validation error",
            "errors": [
              {
                "message": "Username should have at least 3 characters",
                "path": [
                  "name"
                ],
                "type": "string.min",
                "context": {
                  "limit": 3,
                  "value": "T",
                  "label": "name",
                  "key": "name"
                }
              },
              {
                "message": "Phone number must contain 3 to 20 digits and may start with \"+\"",
                "path": [
                  "phoneNumber"
                ],
                "type": "string.pattern.base",
                "context": {
                  "regex": {},
                  "value": "+3",
                  "label": "phoneNumber",
                  "key": "phoneNumber"
                }
              },
              {
                "message": "Please enter a valid email address",
                "path": [
                  "email"
                ],
                "type": "string.email",
                "context": {
                  "value": "to",
                  "invalids": [
                    "to"
                  ],
                  "label": "email",
                  "key": "email"
                }
              },
              {
                "message": "Is favourite should be a boolean",
                "path": [
                  "isFavourite"
                ],
                "type": "boolean.base",
                "context": {
                  "label": "isFavourite",
                  "value": "tr",
                  "key": "isFavourite"
                }
              },
              {
                "message": "Contact type must be one of: work, home, or personal",
                "path": [
                  "contactType"
                ],
                "type": "any.only",
                "context": {
                  "valids": [
                    "work",
                    "home",
                    "personal"
                  ],
                  "label": "contactType",
                  "value": "qwer",
                  "key": "contactType"
                }
              },
              {
                "message": "\"photo\" is not allowed",
                "path": [
                  "photo"
                ],
                "type": "object.unknown",
                "context": {
                  "child": "photo",
                  "label": "photo",
                  "value": "tqwer",
                  "key": "photo"
                }
              }
            ]
          }
        }
      },
      "getContactById.contacts.example": {
        "value": {
          "status": 200,
          "message": "Successfully found contact with id 684f6ec9a81f97b9fa6c65f1!",
          "data": {
            "_id": "685479239262ba2385e6666a",
            "name": "Tokio_Touka",
            "phoneNumber": "+380951000993",
            "email": "touka@gmail.com",
            "isFavourite": true,
            "contactType": "work",
            "userId": "684f6e85a81f97b9fa6c65e9",
            "photo": "https://res.cloudinary.com/dz38jybtu/image/upload/v1750366499/projects/node-js-mongodb/contacts/avatars/blonde-blue-eye_1920x1080_1750366497421-881516606.jpg",
            "createdAt": "2025-06-19T20:54:59.177Z",
            "updatedAt": "2025-06-19T20:54:59.177Z"
          }
        }
      },
      "invalidContactId.contacts.example": {
        "value": {
          "status": 400,
          "message": "BadRequestError",
          "data": {
            "message": "Requested contact id: '684f6ec9a81f97b9fa6c65f' is not a mongoose ObjectId"
          }
        }
      },
      "notFoundError.contacts.example": {
        "value": {
          "status": 404,
          "message": "NotFoundError",
          "data": {
            "message": "Contact not found"
          }
        }
      },
      "updateContact.contacts.example": {
        "value": {
          "status": 200,
          "message": "Successfully updated a contact!",
          "isNew": false,
          "data": {
            "name": "Sia",
            "phoneNumber": "+380951230723",
            "email": "sia@gmail.com",
            "isFavourite": true,
            "contactType": "work",
            "userId": "684f6e85a81f97b9fa6c65e9",
            "photo": "https://res.cloudinary.com/dz38jybtu/image/upload/v1750371281/projects/node-js-mongodb/contacts/avatars/girl-under-rain_1750371280158-158722402.jpg",
            "_id": "684f6ec9a81f97b9fa6c65ff",
            "createdAt": "2025-06-19T22:09:10.425Z",
            "updatedAt": "2025-06-19T22:14:41.843Z"
          }
        }
      },
      "createContact.contacts.example": {
        "value": {
          "status": 201,
          "message": "Successfully created a contact!",
          "isNew": true,
          "data": {
            "name": "Tokio_Touka",
            "phoneNumber": "+380951000993",
            "email": "touka@gmail.com",
            "isFavourite": true,
            "contactType": "personal",
            "userId": "684f6e85a81f97b9fa6c65e9",
            "photo": "https://res.cloudinary.com/dz38jybtu/image/upload/v1750369802/projects/node-js-mongodb/contacts/avatars/blonde-blue-eye_1920x1080_1750369801009-465321042.jpg",
            "_id": "6854860a9262ba2385e66694",
            "createdAt": "2025-06-19T21:50:02.672Z",
            "updatedAt": "2025-06-19T21:50:02.672Z"
          }
        }
      },
      "patchContact.contacts.example": {
        "value": {
          "status": 200,
          "message": "Successfully updated a contact!",
          "isNew": false,
          "data": {
            "name": "Sia",
            "phoneNumber": "+380951230723",
            "email": "sia@gmail.com",
            "isFavourite": true,
            "contactType": "work",
            "userId": "684f6e85a81f97b9fa6c65e9",
            "photo": "https://res.cloudinary.com/dz38jybtu/image/upload/v1750371281/projects/node-js-mongodb/contacts/avatars/girl-under-rain_1750371280158-158722402.jpg",
            "_id": "684f6ec9a81f97b9fa6c65ff",
            "createdAt": "2025-06-19T22:09:10.425Z",
            "updatedAt": "2025-06-19T22:14:41.843Z"
          }
        }
      },
      "register.auth.example": {
        "value": {
          "status": 201,
          "message": "Successfully registered user!",
          "data": {
            "name": "Nick Fury",
            "email": "nickfury@mail.com",
            "_id": "6853f991e983d0f76f8a4e22",
            "createdAt": "2025-06-19T11:50:41.851Z",
            "updatedAt": "2025-06-19T11:50:41.851Z"
          }
        }
      },
      "emailInUse.auth.example": {
        "value": {
          "status": 409,
          "message": "ConflictError",
          "data": {
            "message": "Email in use"
          }
        }
      },
      "login.auth.example": {
        "value": {
          "status": 200,
          "message": "Successfully logged in an user!",
          "data": {
            "accessToken": "racd0uTrgB6BkzKWckPmMqtXMXSroXcEz/IswTQp"
          }
        }
      },
      "bodyValidationError.auth.example": {
        "value": {
          "status": 400,
          "message": "BadRequestError",
          "data": {
            "message": "Body validation error",
            "errors": [
              {
                "message": "\\\"email\\\" must be a valid email",
                "path": [
                  "email"
                ],
                "type": "string.email",
                "context": {
                  "value": "qq",
                  "invalids": [
                    "qq"
                  ],
                  "label": "email",
                  "key": "email"
                }
              }
            ]
          }
        }
      },
      "unauthorized.auth.example": {
        "value": {
          "status": 401,
          "message": "UnauthorizedError",
          "data": {
            "message": "Unauthorized"
          }
        }
      },
      "notFoundError.auth.example": {
        "value": {
          "status": 404,
          "message": "NotFoundError",
          "data": {
            "message": "User not found"
          }
        }
      },
      "refresh.auth.example": {
        "value": {
          "status": 200,
          "message": "Successfully refreshed a session!",
          "data": {
            "accessToken": "6W/wNXRplRcPbvX+Y+E3ZNynHif+t6gTHiR2K3Hg"
          }
        }
      },
      "refreshUnauthorized.auth.example": {
        "value": {
          "status": 401,
          "message": "UnauthorizedError",
          "data": {
            "message": "Session not found"
          }
        }
      },
      "sendResetEmail.auth.example": {
        "value": {
          "status": 200,
          "message": "Reset password email has been successfully sent.",
          "data": {}
        }
      },
      "userNotFound.auth.example": {
        "value": {
          "status": 404,
          "message": "NotFoundError",
          "data": {
            "message": "User not found!"
          }
        }
      },
      "resetPwd.auth.example": {
        "value": {
          "status": 200,
          "message": "Password has been successfully reset.",
          "data": {}
        }
      },
      "resetTokenExpired.auth.example": {
        "value": {
          "status": 401,
          "message": "UnauthorizedError",
          "data": {
            "message": "Token is expired"
          }
        }
      },
      "resetTokenInvalid.auth.example": {
        "value": {
          "status": 401,
          "message": "UnauthorizedError",
          "data": {
            "message": "Token is invalid"
          }
        }
      },
      "getOAuthUrl.auth.example": {
        "value": {
          "status": 200,
          "message": "Successfully get Google OAuth url!",
          "data": {
            "url": "https://accounts.google.com/o/oauth2/v2/auth?scope=https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.email%20https%3A%2F%2Fwww.googleapis.com%2Fauth%2Fuserinfo.profile&response_type=code&client_id=549010708461-j72jeklmhqa5vnbu97jfvi7k4cgq6psb.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3A3000%2Fgoogle-oauth"
          }
        }
      },
      "confirmOAuth.auth.example": {
        "value": {
          "status": 200,
          "message": "Successfully logged in via Google OAuth!",
          "data": {
            "accessToken": "OpSua0ZYR/AxFbFWxygw28/3zIZDWHZvyG9KAx1k"
          }
        }
      },
      "invalidGrant.auth.example": {
        "value": {
          "message": "NotFoundError",
          "error": "invalid_grant"
        }
      }
    },
    "responses": {
      "getContacts.contacts.response": {
        "description": "Get contacts",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getContacts.success"
            },
            "examples": {
              "getContacts": {
                "summary": "Get contacts",
                "$ref": "#/components/examples/getContacts.contacts.example"
              }
            }
          }
        }
      },
      "unauthorized.contacts.response": {
        "description": "Unauthorized access - access token expired or session not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/unauthorized.error"
            },
            "examples": {
              "accessTokenExpired": {
                "summary": "Access token expired",
                "$ref": "#/components/examples/accessTokenExpired.contacts.example"
              },
              "sessionNotFound": {
                "summary": "Session not found",
                "$ref": "#/components/examples/sessionNotFound.contacts.example"
              }
            }
          }
        }
      },
      "postContact.contacts.response": {
        "description": "Creates a contact",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/postContact.success"
            },
            "examples": {
              "createContact": {
                "summary": "Create a contact",
                "$ref": "#/components/examples/postContact.contacts.example"
              }
            }
          }
        }
      },
      "bodyValidationError.contacts.response": {
        "description": "Bad request error - body validation error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/badRequest.error"
            },
            "examples": {
              "bodyValidationError": {
                "summary": "Body validation error",
                "$ref": "#/components/examples/bodyValidationError.contacts.example"
              }
            }
          }
        }
      },
      "getContactById.contacts.response": {
        "description": "Successfully found contact by ID",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getContactById.success"
            },
            "examples": {
              "success": {
                "summary": "Found contact by ID",
                "$ref": "#/components/examples/getContactById.contacts.example"
              }
            }
          }
        }
      },
      "invalidContactId.contacts.response": {
        "description": "Bad request error - invalid contact id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/badRequest.error"
            },
            "examples": {
              "invalidContactId": {
                "summary": "Invalid contact id",
                "$ref": "#/components/examples/invalidContactId.contacts.example"
              }
            }
          }
        }
      },
      "notFoundError.contacts.response": {
        "description": "Not found error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/badRequest.error"
            },
            "examples": {
              "notFoundError": {
                "summary": "Contact not found",
                "$ref": "#/components/examples/notFoundError.contacts.example"
              }
            }
          }
        }
      },
      "updateContact.contacts.response": {
        "description": "Updates a contact",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/updateContact.success"
            },
            "examples": {
              "updateContact": {
                "summary": "Update a contact",
                "$ref": "#/components/examples/updateContact.contacts.example"
              }
            }
          }
        }
      },
      "createContact.contacts.response": {
        "description": "Creates a contact",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/createContact.success"
            },
            "examples": {
              "createContact": {
                "summary": "Create a contact",
                "$ref": "#/components/examples/createContact.contacts.example"
              }
            }
          }
        }
      },
      "bodyValidationErrorOrInvalidContactId.contacts.response": {
        "description": "Bad request error - body validation error or invalid contact id",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/badRequest.error"
            },
            "examples": {
              "bodyValidationError": {
                "summary": "Body validation error",
                "$ref": "#/components/examples/bodyValidationError.contacts.example"
              },
              "invalidContactId": {
                "summary": "Invalid contact id",
                "$ref": "#/components/examples/invalidContactId.contacts.example"
              }
            }
          }
        }
      },
      "patchContact.contacts.response": {
        "description": "Updates a contact",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/patchContact.success"
            },
            "examples": {
              "updateContact": {
                "summary": "Update a contact",
                "$ref": "#/components/examples/patchContact.contacts.example"
              }
            }
          }
        }
      },
      "register.auth.response": {
        "description": "Creates a new user",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/register.success"
            },
            "examples": {
              "register": {
                "summary": "Creates new user",
                "$ref": "#/components/examples/register.auth.example"
              }
            }
          }
        }
      },
      "emailInUse.auth.response": {
        "description": "Conflict error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/conflict.error"
            },
            "examples": {
              "emailInUse": {
                "$ref": "#/components/examples/emailInUse.auth.example"
              }
            }
          }
        }
      },
      "login.auth.response": {
        "description": "Logins a user",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/login.success"
            },
            "examples": {
              "login": {
                "$ref": "#/components/examples/login.auth.example"
              }
            }
          }
        }
      },
      "bodyValidationError.auth.response": {
        "description": "Bad validation error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/badRequestError.error"
            },
            "examples": {
              "bodyValidationError": {
                "$ref": "#/components/examples/bodyValidationError.auth.example"
              }
            }
          }
        }
      },
      "unauthorized.auth.response": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/unauthorized.error"
            },
            "examples": {
              "bodyValidationError": {
                "$ref": "#/components/examples/unauthorized.auth.example"
              }
            }
          }
        }
      },
      "notFoundError.auth.response": {
        "description": "Not found error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/notFoundError.error"
            },
            "examples": {
              "notFoundError": {
                "$ref": "#/components/examples/notFoundError.auth.example"
              }
            }
          }
        }
      },
      "refresh.auth.response": {
        "description": "Refresh a user",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/refresh.success"
            },
            "examples": {
              "refresh": {
                "$ref": "#/components/examples/refresh.auth.example"
              }
            }
          }
        }
      },
      "refreshUnauthorized.auth.response": {
        "description": "Refresh unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/refreshUnauthorized.error"
            },
            "examples": {
              "refresh": {
                "$ref": "#/components/examples/refreshUnauthorized.auth.example"
              }
            }
          }
        }
      },
      "sendResetEmail.auth.response": {
        "description": "Send reset email",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/sendResetEmail.success"
            },
            "examples": {
              "sendResetEmail": {
                "$ref": "#/components/examples/sendResetEmail.auth.example"
              }
            }
          }
        }
      },
      "userNotFound.auth.response": {
        "description": "User not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/userNotFound.error"
            },
            "examples": {
              "userNotFound": {
                "$ref": "#/components/examples/userNotFound.auth.example"
              }
            }
          }
        }
      },
      "resetPwd.auth.response": {
        "description": "Send reset email",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/resetPwd.success"
            },
            "examples": {
              "sendResetEmail": {
                "$ref": "#/components/examples/resetPwd.auth.example"
              }
            }
          }
        }
      },
      "resetTokenExpiredOrInvalid.auth.response": {
        "description": "UnauthorizedError - Token is expired or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/resetTokenExpiredOrInvalid.error"
            },
            "examples": {
              "resetTokenExpired": {
                "$ref": "#/components/examples/resetTokenExpired.auth.example"
              },
              "resetTokenInvalid": {
                "$ref": "#/components/examples/resetTokenInvalid.auth.example"
              }
            }
          }
        }
      },
      "getOAuthUrl.auth.response": {
        "description": "Get google oauth url",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/getOAuthUrl.success"
            },
            "examples": {
              "getOauthUrl": {
                "$ref": "#/components/examples/getOAuthUrl.auth.example"
              }
            }
          }
        }
      },
      "confirmOAuth.auth.response": {
        "description": "Send reset email",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/confirmOAuth.success"
            },
            "examples": {
              "confirmOAuth": {
                "$ref": "#/components/examples/confirmOAuth.auth.example"
              }
            }
          }
        }
      },
      "invalidGrant.auth.response": {
        "description": "Internal Server Error - invalid_grant",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/invalidGrant.error"
            },
            "examples": {
              "invalidGrant": {
                "$ref": "#/components/examples/invalidGrant.auth.example"
              }
            }
          }
        }
      }
    }
  }
}